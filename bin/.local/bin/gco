#!/usr/bin/env bash

# check if in a git dir
if [ git rev-parse --git-dir > /dev/null 2>&1 ]; then
    echo "Not a git directory"
    exit 0
fi

if [[ $# -eq 1 ]]; then
    # if we run gco with a branch name, use that. otherwise display a list.
    selected=$1
else
    # list all branches. if branch starts with *, it's the current branch - print the 2nd column (the branch name)
    # otherwise, print column 1. most of the time there's only one column, except sometimes you get a thing like remotes/origin/HEAD -> origin/main
    # we don't want the second part of that.
    # next, we remove the string "remotes/origin/" - we just want the branch name.
    # finally, we'll remove duplicate lines. If we have a branch locally and remotely, it would show twice. that's confusing.
    branches=$(git branch -a | awk '{ if($1 == "*") print $2; else print $1}' | sed 's/remotes\/origin\///gi' | awk '!x[$0]++')
    total_branches=$(echo "$branches" | wc -l | xargs)
    selected=$(echo "$branches" | gum filter --placeholder "Filter branches..." --height "$total_branches")
fi

current_branch=$(git branch --show-current)

# only switch if we actually picked a different branch
if [[ $selected != $current_branch ]]; then
    git switch $selected
fi
